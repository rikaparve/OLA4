stop("Request failed after ", retries, " attempts.")
}
# Loop through each site and process
tables <- lapply(sites, function(site) {
# Step 1: Get the initial page and extract cookies
resraw <- GET(site$url, add_headers("user-agent" = "Mozilla/5.0"), verbose(), timeout(120))
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
# Step 2: Extract CSRF token
hhc <- content(resraw, as = "text")
csrf_token <- read_html(hhc) %>% html_node(site$csrf_node) %>% html_attr("value")
# Step 3: Request the data using the extracted CSRF token and cookie string
get_table_data(site$url, csrf_token, cookie_string, site$referer)
})
# Define a function to request data from each site
get_table_data <- function(url, csrf_token, cookie_string, referer) {
body <- list(`__RequestVerificationToken` = csrf_token)
headers <- c(
'Accept' = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
'Accept-Encoding' = 'gzip, deflate, br, zstd',
'Accept-Language' = 'en-US,en;q=0.9',
'Cache-Control' = 'private',
'Connection' = 'keep-alive',
'Content-Type' = 'text/html; charset=utf-8',
'Host' = 'envs2.au.dk',
'Method' = 'GET',
'Scheme' = 'https',
'X-AspNet-Version' = '4.0.30319',
'X-AspNetMvc-Version' = '5.2',
'X-Frame-Options' = 'SAMEORIGIN',
'X-Powered-By' = 'ASP.NET',
'Date' = 'Tue, 03 Dec 2024 15:48:02 GMT',
'Content-Length' = '11147',
'Cookie' = cookie_string,
'Referer' = referer,
'User-Agent' = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36'
)
# Retry logic to handle temporary issues with the server
retries <- 3
for (i in 1:retries) {
# Send POST request with timeout increased, verbose output, and SSL verification disabled
response <- tryCatch({
POST(url, body = body, encode = "form", add_headers(.headers = headers),
timeout(120), ssl_verifypeer = 0, verbose())
}, error = function(e) {
message("Attempt ", i, " failed: ", e$message)
return(NULL)
})
# Check if response is NULL before trying to get status code
if (!is.null(response)) {
if (status_code(response) == 200) {
# Get the HTML content
content_html <- content(response, as = "text")
# Parse the content and extract the table
page <- read_html(content_html)
table_data <- page %>% html_node("table") %>% html_table()
return(table_data)
} else {
message("Attempt ", i, " failed with status: ", status_code(response))
}
} else {
message("Attempt ", i, " failed: No response received")
}
}
stop("Request failed after ", retries, " attempts.")
}
# Loop through each site and process
tables <- lapply(sites, function(site) {
# Step 1: Get the initial page and extract cookies
resraw <- GET(site$url, add_headers("user-agent" = "Mozilla/5.0"), verbose(), timeout(120))
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
# Step 2: Extract CSRF token
hhc <- content(resraw, as = "text")
csrf_token <- read_html(hhc) %>% html_node(site$csrf_node) %>% html_attr("value")
# Step 3: Request the data using the extracted CSRF token and cookie string
get_table_data(site$url, csrf_token, cookie_string, site$referer)
})
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
resraw <- GET(url = url_1)
resraw$status_code
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
hhc <- content(resraw, as="text")
csrf_token <- read_html(hhc) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
body <- list(
`__RequestVerificationToken` = csrf_token
)
url_2 <- "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB"
resraw2 <- POST(url = url_2)
# Definer headers som en karaktervektor uden ekstra kommaer
headers <- c(
"accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
"accept-encoding" = "gzip, deflate, br",
"accept-language" = "da-DK,da;q=0.9,en-US;q=0.8,en;q=0.7",
"cookie" = cookie_string,
"referer" = "https://envs.au.dk/",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
)
# Brug add_headers korrekt
response <- POST(url_2, body = body, encode = "form", add_headers(headers))
View(response)
# Kontroller om anmodningen lykkedes
if (status_code(response) == 200) {
cat("Anmodning lykkedes. Henter data...\n")
# Få HTML-indholdet af svar
content_html <- content(response, as = "text")
# Brug rvest til at parse HTML og finde tabellen
page <- read_html(content_html)
# Find tabellen og hent data
table_København2 <- page %>% html_node("table") %>% html_table()
# Udskriv tabellen
print(table_København2)
} else {
stop("Anmodning fejlede med status: ", status_code(response))
}
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
# indlæs nødvendige pakker
library(httr)
library(rvest)
library(tidyverse)
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
resraw <- GET(url = url_1)
resraw$status_code
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
hhc <- content(resraw, as="text")
csrf_token <- read_html(hhc) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
body <- list(
`__RequestVerificationToken` = csrf_token
)
url_2 <- "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB"
resraw2 <- POST(url = url_2)
# Definer headers som en karaktervektor uden ekstra kommaer
headers <- c(
"accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
"accept-encoding" = "gzip, deflate, br",
"accept-language" = "da-DK,da;q=0.9,en-US;q=0.8,en;q=0.7",
"cookie" = cookie_string,
"referer" = "https://envs.au.dk/",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
)
# Brug add_headers korrekt
response <- POST(url_2, body = body, encode = "form", add_headers(headers))
# Kontroller om anmodningen lykkedes
if (status_code(response) == 200) {
cat("Anmodning lykkedes. Henter data...\n")
# Få HTML-indholdet af svar
content_html <- content(response, as = "text")
# Brug rvest til at parse HTML og finde tabellen
page <- read_html(content_html)
# Find tabellen og hent data
table_København2 <- page %>% html_node("table") %>% html_table()
# Udskriv tabellen
print(table_København2)
} else {
stop("Anmodning fejlede med status: ", status_code(response))
}
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
resraw <- GET(url = url_1)
resraw$status_code
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
hhc <- content(resraw, as="text")
csrf_token <- read_html(hhc) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
# indlæs nødvendige pakker
library(httr)
library(rvest)
library(tidyverse)
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
resraw <- GET(url = url_1)
resraw$status_code
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
hhc <- content(resraw, as="text")
csrf_token <- read_html(hhc) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
body <- list(
`__RequestVerificationToken` = csrf_token
)
url_2 <- "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB"
resraw2 <- POST(url = url_2)
# Definer headers som en karaktervektor uden ekstra kommaer
headers <- c(
"accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
"accept-encoding" = "gzip, deflate, br",
"accept-language" = "da-DK,da;q=0.9,en-US;q=0.8,en;q=0.7",
"cookie" = cookie_string,
"referer" = "https://envs.au.dk/",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
)
# Brug add_headers korrekt
response <- POST(url_2, body = body, encode = "form", add_headers(headers))
# Kontroller om anmodningen lykkedes
if (status_code(response) == 200) {
cat("Anmodning lykkedes. Henter data...\n")
# Få HTML-indholdet af svar
content_html <- content(response, as = "text")
# Brug rvest til at parse HTML og finde tabellen
page <- read_html(content_html)
# Find tabellen og hent data
table_København2 <- page %>% html_node("table") %>% html_table()
# Udskriv tabellen
print(table_København2)
} else {
stop("Anmodning fejlede med status: ", status_code(response))
}
#Define the header
headers <- c(
'Accept' = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
'Accept-Encoding' = 'gzip, deflate, br, zstd',
'Accept-Language' = 'en-US,en;q=0.9',
'Cache-Control' = 'private',
'Connection' = 'keep-alive',
'Content-Type' = 'text/html; charset=utf-8',
'Host' = 'envs2.au.dk',
'Method' = 'GET',
'Scheme' = 'https',
'X-AspNet-Version' = '4.0.30319',
'X-AspNetMvc-Version' = '5.2',
'X-Frame-Options' = 'SAMEORIGIN',
'X-Powered-By' = 'ASP.NET',
'Date' = 'Tue, 03 Dec 2024 15:48:02 GMT',
'Content-Length' = '11147',
'Cookie' = cookie_string,
'Referer' = referer,
'User-Agent' = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36'
)
# Define a function to request data from each site
get_table_data <- function(url, csrf_token, cookie_string, referer) {
body <- list(`__RequestVerificationToken` = csrf_token)
# Send POST request
response <- POST(url, body = body, encode = "form", add_headers(.headers = headers))
if (status_code(response) == 200) {
# Get the HTML content
content_html <- content(response, as = "text")
# Parse the content and extract the table
page <- read_html(content_html)
table_data <- page %>% html_node("table") %>% html_table()
return(table_data)
} else {
stop("Request failed with status: ", status_code(response))
}
}
# Define URLs, referers, and tokens for all sites
sites <- list(
list(url = "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB", referer = "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB", cookie_name = "mycookie", csrf_node = "input[name='__RequestVerificationToken']"),
list(url = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/RISOE", referer = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/RISOE", cookie_name = "mycookie_risoe", csrf_node = "input[name='__RequestVerificationToken']"),
list(url = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/ANHO", referer = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/ANHO", cookie_name = "mycookie_anholt", csrf_node = "input[name='__RequestVerificationToken']"),
list(url = "https://envs2.au.dk/Luftdata/Presentation/table/Aarhus/AARH3", referer = "https://envs2.au.dk/Luftdata/Presentation/table/Aarhus/AARH3", cookie_name = "mycookie_aarhus", csrf_node = "input[name='__RequestVerificationToken']")
)
# Loop through each site and process
tables <- lapply(sites, function(site) {
# Step 1: Get the initial page and extract cookies
resraw <- GET(site$url, add_headers("user-agent" = "Mozilla/5.0"), verbose(), timeout(120))
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
# Step 2: Extract CSRF token
hhc <- content(resraw, as = "text")
csrf_token <- read_html(hhc) %>% html_node(site$csrf_node) %>% html_attr("value")
# Step 3: Request the data using the extracted CSRF token and cookie string
get_table_data(site$url, csrf_token, cookie_string, site$referer)
})
library(xml2)
# Loop through each site and process
tables <- lapply(sites, function(site) {
# Step 1: Get the initial page and extract cookies
resraw <- GET(site$url, add_headers("user-agent" = "Mozilla/5.0"), verbose(), timeout(120))
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
# Step 2: Extract CSRF token
hhc <- content(resraw, as = "text")
csrf_token <- read_html(hhc) %>% html_node(site$csrf_node) %>% html_attr("value")
# Step 3: Request the data using the extracted CSRF token and cookie string
get_table_data(site$url, csrf_token, cookie_string, site$referer)
})
library(XML)
# Loop through each site and process
tables <- lapply(sites, function(site) {
# Step 1: Get the initial page and extract cookies
resraw <- GET(site$url, add_headers("user-agent" = "Mozilla/5.0"), verbose(), timeout(120))
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
# Step 2: Extract CSRF token
hhc <- content(resraw, as = "text")
csrf_token <- read_html(hhc) %>% html_node(site$csrf_node) %>% html_attr("value")
# Step 3: Request the data using the extracted CSRF token and cookie string
get_table_data(site$url, csrf_token, cookie_string, site$referer)
})
new_bil_renset_df
# indlæs nødvendige pakker
library(httr)
library(rvest)
library(tidyverse)
url_1 <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
resraw <- GET(url = url_1)
resraw$status_code
mycookie <- resraw$cookies
cookie_string <- paste(mycookie$name, mycookie$value, sep = "=", collapse = "; ")
hhc <- content(resraw, as="text")
csrf_token <- read_html(hhc) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
body <- list(
`__RequestVerificationToken` = csrf_token
)
url_2 <- "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB"
resraw2 <- POST(url = url_2)
# Definer headers som en karaktervektor uden ekstra kommaer
headers <- c(
"accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
"accept-encoding" = "gzip, deflate, br",
"accept-language" = "da-DK,da;q=0.9,en-US;q=0.8,en;q=0.7",
"cookie" = cookie_string,
"referer" = "https://envs.au.dk/",
"user-agent" = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
)
# Brug add_headers korrekt
response <- POST(url_2, body = body, encode = "form", add_headers(headers))
# Kontroller om anmodningen lykkedes
if (status_code(response) == 200) {
cat("Anmodning lykkedes. Henter data...\n")
# Få HTML-indholdet af svar
content_html <- content(response, as = "text")
# Brug rvest til at parse HTML og finde tabellen
page <- read_html(content_html)
# Find tabellen og hent data
table_København2 <- page %>% html_node("table") %>% html_table()
# Udskriv tabellen
print(table_København2)
} else {
stop("Anmodning fejlede med status: ", status_code(response))
}
library(httr)
library(rvest)
# Hent siden for at få CSRF-token
url <- "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB"
res <- GET(url)
html <- content(res, as = "text")
csrf_token <- read_html(html) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
# Send POST-anmodning med CSRF-token
res_post <- POST(
url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB",
body = list("__RequestVerificationToken" = csrf_token),
encode = "form"
)
# Parse og gem tabellen
hcabdata <- read_html(content(res_post, as = "text")) %>%
html_table(fill = TRUE) %>%
.[[1]]
write.csv(hcabdata, "HCABdata", row.names = FALSE)
View(hcabdata)
# Hent siden for at få CSRF-token
url <- "https://envs2.au.dk/Luftdata/Presentation/table/Rural/ANHO"
res <- GET(url)
html <- content(res, as = "text")
csrf_token <- read_html(html) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
# Send POST-anmodning med CSRF-token
res_post <- POST(
url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Rural/ANHO",
body = list("__RequestVerificationToken" = csrf_token),
encode = "form"
)
# Parse og gem tabellen
anhodata <- read_html(content(res_post, as = "text")) %>%
html_table(fill = TRUE) %>%
.[[1]]
View(anhodata)
# Hent siden for at få CSRF-token
url <- "https://envs2.au.dk/Luftdata/Presentation/table/Aarhus/AARH3"
res <- GET(url)
html <- content(res, as = "text")
csrf_token <- read_html(html) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
# Send POST-anmodning med CSRF-token
res_post <- POST(
url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Aarhus/AARH3",
body = list("__RequestVerificationToken" = csrf_token),
encode = "form"
)
# Parse og gem tabellen
aarh3data <- read_html(content(res_post, as = "text")) %>%
html_table(fill = TRUE) %>%
.[[1]]
# Hent siden for at få CSRF-token
url <- "https://envs2.au.dk/Luftdata/Presentation/table/Rural/RISOE"
res <- GET(url)
html <- content(res, as = "text")
csrf_token <- read_html(html) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
# Send POST-anmodning med CSRF-token
res_post <- POST(
url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Rural/RISOE",
body = list("__RequestVerificationToken" = csrf_token),
encode = "form"
)
# Parse og gem tabellen
risoe_data <- read_html(content(res_post, as = "text")) %>%
html_table(fill = TRUE) %>%
.[[1]]
installed.packages()
row.names(installed.packages())
library(httr)
library(httr)
library(rvest)
# Function to retrieve data
fetch_air_quality_data <- function(base_url, main_table_url) {
res <- GET(base_url)
html <- content(res, as = "text")
csrf_token <- read_html(html) %>%
html_node("input[name='__RequestVerificationToken']") %>%
html_attr("value")
res_post <- POST(
url = main_table_url,
body = list("__RequestVerificationToken" = csrf_token),
encode = "form"
)
data <- read_html(content(res_post, as = "text")) %>%
html_table(fill = TRUE) %>%
.[[1]]
return(data)
}
# List of websites
locations <- list(
HCAB = list(
base_url = "https://envs2.au.dk/Luftdata/Presentation/table/Copenhagen/HCAB",
main_table_url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Copenhagen/HCAB"
),
Anholt = list(
base_url = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/ANHO",
main_table_url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Rural/ANHO"
),
AARH3 = list(
base_url = "https://envs2.au.dk/Luftdata/Presentation/table/Aarhus/AARH3",
main_table_url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Aarhus/AARH3"
),
RISOE = list(
base_url = "https://envs2.au.dk/Luftdata/Presentation/table/Rural/RISOE",
main_table_url = "https://envs2.au.dk/Luftdata/Presentation/table/MainTable/Rural/RISOE"
)
)
# Retrieve data for each location
data_list <- lapply(locations, function(urls) fetch_air_quality_data(urls$base_url, urls$main_table_url))
View(data_list)
View(data_list)
View(data_list)
View(data_list)
library(tidyverse)
# Combine the data from the list into a single dataframe
combined_data <- bind_rows(
lapply(names(data_list), function(station) {
data_list[[station]] %>%
mutate(Station = station)
})
)
View(combined_data)
##################### Pushing it to SQL
library(DBI)
library(RMariaDB)
con_ubuntu <- dbConnect(MariaDB(),
db = "air_quality_data",
host = "51.20.185.161",
port = 3306,
user = "redrika",
password = "Klok$klak#5235")
con_ubuntu <- dbConnect(MariaDB(),
db = "air_quality_data",
host = "51.20.185.161",
port = 3306,
user = "redrika",
password = "RedRika")
con_ubuntu <- dbConnect(MariaDB(),
db = "air_quality_data",
host = "51.20.185.161",
port = 3306,
user = "redrika",
password = "bHuyHn#3174*")
con_ubuntu <- dbConnect(MariaDB(),
db = "air_quality_data",
host = "51.20.185.161",
port = 3306,
user = "redrika",
password = "RedRika#3174")
print(dbListTables(con_ubuntu))
View(combined_data)
View(combined_data)
View(combined_data)
combined_data[,2:8] <- lapply(combined_data[,2:8], function(x) {
as.numeric(gsub(",", ".", x))
})
View(combined_data)
### Push the current data
dbWriteTable(con_ubuntu, "air_quality", combined_data, append=TRUE, row.names=FALSE)
### Push the current data
dbWriteTable(con_ubuntu, "air_quality", combined_data, append=TRUE, row.names=FALSE)
### Push the current data
dbWriteTable(con_ubuntu, "air_quality", combined_data, append=TRUE, row.names=FALSE)
### Push the current data
dbWriteTable(con_ubuntu, "air_quality", combined_data, append=TRUE, row.names=FALSE)
